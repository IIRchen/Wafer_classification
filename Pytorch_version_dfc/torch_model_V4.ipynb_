{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"id":"TWjdLoGppE-8","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1715139650853,"user_tz":-480,"elapsed":24632,"user":{"displayName":"陳冠宇","userId":"02437951698618350437"}},"outputId":"ac5a9fdd-a522-4a5d-9885-beb52d05bf3d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"YJR8bAycY_3Z"},"outputs":[],"source":["import torch\n","import torchvision.ops\n","from torch import nn\n","\n","\n","class DeformableConv2d(nn.Module):\n","    def __init__(self,\n","                 in_channels,\n","                 out_channels,\n","                 kernel_size=3,\n","                 stride=1,\n","                 padding=1,\n","                 dilation=1,\n","                 bias=False):\n","        super(DeformableConv2d, self).__init__()\n","\n","        assert type(kernel_size) == tuple or type(kernel_size) == int\n","\n","        kernel_size = kernel_size if type(kernel_size) == tuple else (kernel_size, kernel_size)\n","        self.stride = stride if type(stride) == tuple else (stride, stride)\n","        self.padding = padding\n","        self.dilation = dilation\n","\n","        self.offset_conv = nn.Conv2d(in_channels,\n","                                     2 * kernel_size[0] * kernel_size[1],\n","                                     kernel_size=kernel_size,\n","                                     stride=stride,\n","                                     padding=self.padding,\n","                                     dilation=self.dilation,\n","                                     bias=True)\n","\n","        nn.init.constant_(self.offset_conv.weight, 0.)\n","        nn.init.constant_(self.offset_conv.bias, 0.)\n","\n","        self.modulator_conv = nn.Conv2d(in_channels,\n","                                        1 * kernel_size[0] * kernel_size[1],\n","                                        kernel_size=kernel_size,\n","                                        stride=stride,\n","                                        padding=self.padding,\n","                                        dilation=self.dilation,\n","                                        bias=True)\n","\n","        nn.init.constant_(self.modulator_conv.weight, 0.)\n","        nn.init.constant_(self.modulator_conv.bias, 0.)\n","\n","        self.regular_conv = nn.Conv2d(in_channels=in_channels,\n","                                      out_channels=out_channels,\n","                                      kernel_size=kernel_size,\n","                                      stride=stride,\n","                                      padding=self.padding,\n","                                      dilation=self.dilation,\n","                                      bias=bias)\n","\n","    def forward(self, x):\n","        # h, w = x.shape[2:]\n","        # max_offset = max(h, w)/4.\n","\n","        offset = self.offset_conv(x)  # .clamp(-max_offset, max_offset)\n","        modulator = 2. * torch.sigmoid(self.modulator_conv(x))\n","        # op = (n - (k * d - 1) + 2p / s)\n","        x = torchvision.ops.deform_conv2d(input=x,\n","                                          offset=offset,\n","                                          weight=self.regular_conv.weight,\n","                                          bias=self.regular_conv.bias,\n","                                          padding=self.padding,\n","                                          mask=modulator,\n","                                          stride=self.stride,\n","                                          dilation=self.dilation)\n","        return x"]},{"cell_type":"code","source":["import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","\n","\n","class Paper_model(nn.Module):\n","    def __init__(self,classes=8, conv_num=32):\n","        super(Paper_model, self).__init__()\n","        bn_axis = 1  # assuming channels first\n","        self.conv_num = conv_num\n","\n","        self.conv_1_offset = DeformableConv2d(1,conv_num)\n","        self.conv_1 = nn.Conv2d(conv_num, conv_num, kernel_size=3, stride=2, padding=1)\n","        self.batch_normalization_1 = nn.BatchNorm2d(conv_num)\n","\n","        self.conv_2_offset = DeformableConv2d(conv_num,conv_num*2)\n","        self.conv_2 = nn.Conv2d(conv_num * 2 , conv_num * 2, kernel_size=3, stride=2, padding=1)\n","        self.batch_normalization_2 = nn.BatchNorm2d(conv_num * 2)\n","\n","        self.conv_3_offset = DeformableConv2d(conv_num * 2,conv_num * 4)\n","        self.conv_3 = nn.Conv2d(conv_num * 4, conv_num * 4, kernel_size=3, stride=2, padding=1)\n","        self.batch_normalization_3 = nn.BatchNorm2d(conv_num * 4)\n","\n","        self.pooling = nn.AdaptiveAvgPool2d((1, 1))\n","        self.fc = nn.Linear(conv_num * 4, classes)\n","\n","    def forward(self, x):\n","        x = self.conv_1_offset(x)\n","        x = self.conv_1(x)\n","        x = self.batch_normalization_1(x)\n","        x = F.relu(x)\n","\n","        x = self.conv_2_offset(x)\n","        x = self.conv_2(x)\n","        x = self.batch_normalization_2(x)\n","        x = F.relu(x)\n","\n","        x = self.conv_3_offset(x)\n","        x = self.conv_3(x)\n","        x = self.batch_normalization_3(x)\n","        x = F.relu(x)\n","\n","\n","\n","        x = self.pooling(x)\n","        x = x.view(x.size(0), -1)\n","        x = self.fc(x)\n","        return torch.sigmoid(x)\n"],"metadata":{"id":"QezBSWfrbGfu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["you = DeformableConv2d(1,50)\n","print(you.forward(torch.randn(1,1,52,52)).shape)\n","x = torch.randn(10,1,52,52)\n","print(type(x))\n","test = Paper_model()\n","print(test.forward(x).shape)\n","print(test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aV_uiFEbZXGz","executionInfo":{"status":"ok","timestamp":1715139657689,"user_tz":-480,"elapsed":835,"user":{"displayName":"陳冠宇","userId":"02437951698618350437"}},"outputId":"1e6e8314-4809-47b4-9a57-15fc74858064"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["torch.Size([1, 50, 52, 52])\n","<class 'torch.Tensor'>\n","torch.Size([10, 8])\n","Paper_model(\n","  (conv_1_offset): DeformableConv2d(\n","    (offset_conv): Conv2d(1, 18, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (modulator_conv): Conv2d(1, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (regular_conv): Conv2d(1, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","  )\n","  (conv_1): Conv2d(32, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n","  (batch_normalization_1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (conv_2_offset): DeformableConv2d(\n","    (offset_conv): Conv2d(32, 18, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (modulator_conv): Conv2d(32, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (regular_conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","  )\n","  (conv_2): Conv2d(64, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n","  (batch_normalization_2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (conv_3_offset): DeformableConv2d(\n","    (offset_conv): Conv2d(64, 18, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (modulator_conv): Conv2d(64, 9, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))\n","    (regular_conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","  )\n","  (conv_3): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))\n","  (batch_normalization_3): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","  (pooling): AdaptiveAvgPool2d(output_size=(1, 1))\n","  (fc): Linear(in_features=128, out_features=8, bias=True)\n",")\n"]}]},{"cell_type":"code","source":["import numpy as np\n","import torch\n","from torch.utils.data import Dataset, DataLoader, SubsetRandomSampler\n","\n","class WaferDataset(Dataset):\n","    def __init__(self, img_array, label_array):\n","        self.img_array = img_array\n","        self.label_array = label_array\n","\n","    def __len__(self):\n","        return len(self.img_array)\n","\n","    def __getitem__(self, idx):\n","        img = torch.from_numpy(self.img_array[idx]).float().unsqueeze(0)  # 转换为 PyTorch 张量\n","        label = torch.from_numpy(self.label_array[idx]).float()  # 转换为 PyTorch 张量\n","        return img, label\n","\n","# 加载数据\n","data = np.load('/content/drive/MyDrive/DeepLearning_project/Dataset/Aug_training_dataset.npz')\n","training_img_array = data['arr_0']\n","training_label_array = data['arr_1']\n","\n","data = np.load('/content/drive/MyDrive/DeepLearning_project/Dataset/Val_dataset.npz')\n","Val_img_array = data['arr_0']\n","Val_label_array = data['arr_1']\n","# 创建数据集\n","training_dataset = WaferDataset(training_img_array, training_label_array)\n","val_dataset = WaferDataset(Val_img_array, Val_label_array)\n","\n","# 创建数据加载器\n","batch_size = 1024\n","train_dataloader = DataLoader(training_dataset, batch_size=batch_size )\n","val_dataloader = DataLoader(val_dataset, batch_size=batch_size )\n"],"metadata":{"id":"NwFDoOGQsyRn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import torch\n","import numpy as np\n","import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","from torch.utils.data import Dataset, DataLoader\n","\n","# 使用数据加载器进行训练\n","# 创建模型实例\n","paper_model = Paper_model()\n","\n","# 定义损失函数\n","criterion = nn.BCELoss()\n","\n","# 定义优化器\n","optimizer = optim.Adam(paper_model.parameters(), lr=0.001)  # 可以调整学习率\n","\n","\n","num_epochs = 30\n","# 检查是否有可用的 GPU\n","device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\n","print(\"Using device:\", device)\n","\n","# 将模型移动到设备上\n","paper_model.to(device)\n","\n","\n","import random\n","from tqdm import tqdm\n","def caculate_acc_num(outputs,labels):\n","  acc_num = 0\n","  predicted = (outputs > 0.5).float()\n","  #print(outputs.shape)\n","  for idx in range(predicted.shape[0]):\n","    #print(\"Predicted : \",predicted[idx])\n","    #print(\"Labels : \",labels[idx])\n","    if torch.allclose(predicted[idx], labels[idx]):\n","      acc_num += 1\n","\n","  return acc_num\n","# 使用数据加载器进行训练\n","for epoch in range(num_epochs):\n","    train_acc_num = 0\n","    total_train = 0\n","    train_loss = 0\n","    for imgs, labels in tqdm(train_dataloader):\n","        # 清除梯度\n","        optimizer.zero_grad()\n","        imgs = imgs.to(device)\n","        labels = labels.to(device)\n","        # 前向传播\n","        outputs = paper_model(imgs)\n","        total_train += imgs.shape[0]\n","        train_acc_num += caculate_acc_num(outputs,labels)\n","        # 计算损失\n","        loss = criterion(outputs, labels)\n","        train_loss += loss.item()\n","        # 反向传播\n","        loss.backward()\n","\n","        # 更新权重\n","        optimizer.step()\n","        # 随机选择一笔数据打印其标签和预测值\n","        #idx = random.randint(0, len(labels) - 1)\n","        #print(f'Label: {labels[idx]}, Prediction: {(outputs[idx] > 0.5).float()}')\n","\n","    val_acc_num = 0\n","    total_val = 0\n","    val_loss = 0\n","    for imgs, labels in tqdm(val_dataloader):\n","        # 前向传播\n","        imgs = imgs.to(device)\n","        labels = labels.to(device)\n","        outputs = paper_model(imgs)\n","        total_val += imgs.shape[0]\n","        val_acc_num += caculate_acc_num(outputs, labels)\n","        # 计算损失\n","        loss = criterion(outputs, labels)\n","        val_loss += loss.item()\n","\n","\n","    # 每个 epoch 结束后打印损失\n","    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {(train_loss/total_train):.4f} , Acc : {(train_acc_num/total_train):.4f}')\n","    print(f'Val_loss: {(val_loss/total_val):.4f}, Val_Acc: {(val_acc_num/total_val):.4f}')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HDItKcRaga9G","executionInfo":{"status":"ok","timestamp":1715141940252,"user_tz":-480,"elapsed":2203040,"user":{"displayName":"陳冠宇","userId":"02437951698618350437"}},"outputId":"2399706f-3547-4d9e-aeeb-a21c9516d84a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Using device: cuda\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.76it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/30], Loss: 0.0003 , Acc : 0.3791\n","Val_loss: 0.0002, Val_Acc: 0.6196\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.69it/s]\n","100%|██████████| 8/8 [00:02<00:00,  2.97it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/30], Loss: 0.0001 , Acc : 0.8321\n","Val_loss: 0.0001, Val_Acc: 0.9156\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.69it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.69it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/30], Loss: 0.0000 , Acc : 0.9317\n","Val_loss: 0.0000, Val_Acc: 0.9379\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.67it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/30], Loss: 0.0000 , Acc : 0.9487\n","Val_loss: 0.0000, Val_Acc: 0.9537\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.00it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/30], Loss: 0.0000 , Acc : 0.9598\n","Val_loss: 0.0000, Val_Acc: 0.9616\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/30], Loss: 0.0000 , Acc : 0.9652\n","Val_loss: 0.0000, Val_Acc: 0.9658\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.67it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.07it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/30], Loss: 0.0000 , Acc : 0.9694\n","Val_loss: 0.0000, Val_Acc: 0.9665\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.65it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/30], Loss: 0.0000 , Acc : 0.9725\n","Val_loss: 0.0000, Val_Acc: 0.9704\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.35it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/30], Loss: 0.0000 , Acc : 0.9754\n","Val_loss: 0.0000, Val_Acc: 0.9708\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.67it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.03it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/30], Loss: 0.0000 , Acc : 0.9770\n","Val_loss: 0.0000, Val_Acc: 0.9708\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [11/30], Loss: 0.0000 , Acc : 0.9786\n","Val_loss: 0.0000, Val_Acc: 0.9704\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.67it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.42it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [12/30], Loss: 0.0000 , Acc : 0.9797\n","Val_loss: 0.0000, Val_Acc: 0.9722\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.66it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [13/30], Loss: 0.0000 , Acc : 0.9812\n","Val_loss: 0.0000, Val_Acc: 0.9734\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.75it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [14/30], Loss: 0.0000 , Acc : 0.9820\n","Val_loss: 0.0000, Val_Acc: 0.9733\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.67it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.16it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [15/30], Loss: 0.0000 , Acc : 0.9832\n","Val_loss: 0.0000, Val_Acc: 0.9716\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.69it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.74it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [16/30], Loss: 0.0000 , Acc : 0.9838\n","Val_loss: 0.0000, Val_Acc: 0.9720\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  2.91it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [17/30], Loss: 0.0000 , Acc : 0.9854\n","Val_loss: 0.0000, Val_Acc: 0.9709\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.66it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.69it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [18/30], Loss: 0.0000 , Acc : 0.9861\n","Val_loss: 0.0000, Val_Acc: 0.9713\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.48it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [19/30], Loss: 0.0000 , Acc : 0.9864\n","Val_loss: 0.0000, Val_Acc: 0.9733\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.59it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [20/30], Loss: 0.0000 , Acc : 0.9873\n","Val_loss: 0.0000, Val_Acc: 0.9690\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.67it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [21/30], Loss: 0.0000 , Acc : 0.9888\n","Val_loss: 0.0000, Val_Acc: 0.9707\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  2.91it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [22/30], Loss: 0.0000 , Acc : 0.9899\n","Val_loss: 0.0000, Val_Acc: 0.9724\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.62it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [23/30], Loss: 0.0000 , Acc : 0.9909\n","Val_loss: 0.0000, Val_Acc: 0.9638\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.67it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.48it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [24/30], Loss: 0.0000 , Acc : 0.9903\n","Val_loss: 0.0000, Val_Acc: 0.9717\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.21it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [25/30], Loss: 0.0000 , Acc : 0.9911\n","Val_loss: 0.0000, Val_Acc: 0.9744\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.64it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [26/30], Loss: 0.0000 , Acc : 0.9906\n","Val_loss: 0.0000, Val_Acc: 0.9717\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.66it/s]\n","100%|██████████| 8/8 [00:02<00:00,  2.86it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [27/30], Loss: 0.0000 , Acc : 0.9900\n","Val_loss: 0.0000, Val_Acc: 0.9733\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.67it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.63it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [28/30], Loss: 0.0000 , Acc : 0.9909\n","Val_loss: 0.0000, Val_Acc: 0.9758\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.67it/s]\n","100%|██████████| 8/8 [00:02<00:00,  2.95it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [29/30], Loss: 0.0000 , Acc : 0.9908\n","Val_loss: 0.0000, Val_Acc: 0.9712\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:14<00:00,  1.60it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.68it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [30/30], Loss: 0.0000 , Acc : 0.9910\n","Val_loss: 0.0000, Val_Acc: 0.9740\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["best_acc = 0.9740\n","for epoch in range(10):\n","    train_acc_num = 0\n","    total_train = 0\n","    train_loss = 0\n","    for imgs, labels in tqdm(train_dataloader):\n","        # 清除梯度\n","        optimizer.zero_grad()\n","        imgs = imgs.to(device)\n","        labels = labels.to(device)\n","        # 前向传播\n","        outputs = paper_model(imgs)\n","        total_train += imgs.shape[0]\n","        train_acc_num += caculate_acc_num(outputs,labels)\n","        # 计算损失\n","        loss = criterion(outputs, labels)\n","        train_loss += loss.item()\n","        # 反向传播\n","        loss.backward()\n","\n","        # 更新权重\n","        optimizer.step()\n","        # 随机选择一笔数据打印其标签和预测值\n","        #idx = random.randint(0, len(labels) - 1)\n","        #print(f'Label: {labels[idx]}, Prediction: {(outputs[idx] > 0.5).float()}')\n","\n","    val_acc_num = 0\n","    total_val = 0\n","    val_loss = 0\n","    for imgs, labels in tqdm(val_dataloader):\n","        # 前向传播\n","        imgs = imgs.to(device)\n","        labels = labels.to(device)\n","        outputs = paper_model(imgs)\n","        total_val += imgs.shape[0]\n","        val_acc_num += caculate_acc_num(outputs, labels)\n","        # 计算损失\n","        loss = criterion(outputs, labels)\n","        val_loss += loss.item()\n","\n","\n","    # 每个 epoch 结束后打印损失\n","    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {(train_loss/total_train)} , Acc : {(train_acc_num/total_train):.4f}')\n","    print(f'Val_loss: {(val_loss/total_val)}, Val_Acc: {(val_acc_num/total_val):.4f}')\n","\n","    if (val_acc_num/total_val) > best_acc :\n","      best_acc = (val_acc_num/total_val)\n","      torch.save(paper_model.state_dict(), f'/content/drive/MyDrive/DeepLearning_project/Pytorch_version_dfc/Aug_weight_{best_acc:.4f}.pth')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_km7TEKUbh8t","executionInfo":{"status":"ok","timestamp":1715142881964,"user_tz":-480,"elapsed":728419,"user":{"displayName":"陳冠宇","userId":"02437951698618350437"}},"outputId":"054239c5-c75f-41c3-a92c-14a55a843c6c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.70it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.20it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/30], Loss: 0.0000 , Acc : 0.9926\n","Val_loss: 1.811690400199609e-05, Val_Acc: 0.9740891753255294\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.68it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.68it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/30], Loss: 0.0000 , Acc : 0.9929\n","Val_loss: 1.635524837120605e-05, Val_Acc: 0.9761936077864001\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:09<00:00,  1.71it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.78it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/30], Loss: 0.0000 , Acc : 0.9939\n","Val_loss: 1.7645980368534798e-05, Val_Acc: 0.973036959095094\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:09<00:00,  1.70it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.78it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/30], Loss: 0.0000 , Acc : 0.9947\n","Val_loss: 1.6844905393501182e-05, Val_Acc: 0.9759305537287912\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.69it/s]\n","100%|██████████| 8/8 [00:02<00:00,  2.95it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/30], Loss: 0.0000 , Acc : 0.9957\n","Val_loss: 1.8148237378028417e-05, Val_Acc: 0.9750098645271603\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.70it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.75it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/30], Loss: 0.0000 , Acc : 0.9956\n","Val_loss: 1.9908620785188316e-05, Val_Acc: 0.9735630672103117\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:09<00:00,  1.70it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.52it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/30], Loss: 0.0000 , Acc : 0.9959\n","Val_loss: 1.7941818175332477e-05, Val_Acc: 0.9744837564119426\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.69it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.13it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/30], Loss: 0.0000 , Acc : 0.9953\n","Val_loss: 1.8189835636400633e-05, Val_Acc: 0.9733000131527029\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:11<00:00,  1.67it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.72it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/30], Loss: 0.0000 , Acc : 0.9958\n","Val_loss: 2.056830217830291e-05, Val_Acc: 0.9729054320662897\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:12<00:00,  1.64it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.78it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/30], Loss: 0.0000 , Acc : 0.9958\n","Val_loss: 1.9697360738506288e-05, Val_Acc: 0.9721162698934631\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["for epoch in range(10):\n","    train_acc_num = 0\n","    total_train = 0\n","    train_loss = 0\n","    for imgs, labels in tqdm(train_dataloader):\n","        # 清除梯度\n","        optimizer.zero_grad()\n","        imgs = imgs.to(device)\n","        labels = labels.to(device)\n","        # 前向传播\n","        outputs = paper_model(imgs)\n","        total_train += imgs.shape[0]\n","        train_acc_num += caculate_acc_num(outputs,labels)\n","        # 计算损失\n","        loss = criterion(outputs, labels)\n","        train_loss += loss.item()\n","        # 反向传播\n","        loss.backward()\n","\n","        # 更新权重\n","        optimizer.step()\n","        # 随机选择一笔数据打印其标签和预测值\n","        #idx = random.randint(0, len(labels) - 1)\n","        #print(f'Label: {labels[idx]}, Prediction: {(outputs[idx] > 0.5).float()}')\n","\n","    val_acc_num = 0\n","    total_val = 0\n","    val_loss = 0\n","    for imgs, labels in tqdm(val_dataloader):\n","        # 前向传播\n","        imgs = imgs.to(device)\n","        labels = labels.to(device)\n","        outputs = paper_model(imgs)\n","        total_val += imgs.shape[0]\n","        val_acc_num += caculate_acc_num(outputs, labels)\n","        # 计算损失\n","        loss = criterion(outputs, labels)\n","        val_loss += loss.item()\n","\n","\n","    # 每个 epoch 结束后打印损失\n","    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {(train_loss/total_train)} , Acc : {(train_acc_num/total_train):.4f}')\n","    print(f'Val_loss: {(val_loss/total_val)}, Val_Acc: {(val_acc_num/total_val):.4f}')\n","\n","    if (val_acc_num/total_val) > best_acc :\n","\n","      best_acc = (val_acc_num/total_val)\n","      print(f\"saving_weight : {best_acc:.4f}\")\n","      torch.save(paper_model.state_dict(), f'/content/drive/MyDrive/DeepLearning_project/Pytorch_version_dfc/Aug_weight_{best_acc:.4f}.pth')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"f9h8vLuuenTG","executionInfo":{"status":"ok","timestamp":1715143612403,"user_tz":-480,"elapsed":722971,"user":{"displayName":"陳冠宇","userId":"02437951698618350437"}},"outputId":"78aebf20-3686-4473-a382-bbdf04a86e3c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.69it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.75it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [1/30], Loss: 1.7561649456023364e-06 , Acc : 0.9965\n","Val_loss: 2.228151494839247e-05, Val_Acc: 0.9738\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.70it/s]\n","100%|██████████| 8/8 [00:02<00:00,  2.96it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [2/30], Loss: 1.9940182656721854e-06 , Acc : 0.9955\n","Val_loss: 1.9460611508878206e-05, Val_Acc: 0.9726\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:09<00:00,  1.71it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.75it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [3/30], Loss: 1.9402461047920355e-06 , Acc : 0.9959\n","Val_loss: 2.0397283767934194e-05, Val_Acc: 0.9732\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:09<00:00,  1.70it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.80it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [4/30], Loss: 1.9965651020457346e-06 , Acc : 0.9957\n","Val_loss: 2.282471328044775e-05, Val_Acc: 0.9724\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:09<00:00,  1.71it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.24it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [5/30], Loss: 1.606212196250195e-06 , Acc : 0.9966\n","Val_loss: 2.5957719537163822e-05, Val_Acc: 0.9690\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:09<00:00,  1.71it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.81it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [6/30], Loss: 1.9246022987677886e-06 , Acc : 0.9957\n","Val_loss: 2.1885048368252157e-05, Val_Acc: 0.9728\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.70it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.47it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [7/30], Loss: 2.085818130023252e-06 , Acc : 0.9951\n","Val_loss: 2.005278775582388e-05, Val_Acc: 0.9755\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:09<00:00,  1.71it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.81it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [8/30], Loss: 2.0530200371170297e-06 , Acc : 0.9952\n","Val_loss: 1.96090160401012e-05, Val_Acc: 0.9728\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:09<00:00,  1.70it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.05it/s]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch [9/30], Loss: 1.8776792925939601e-06 , Acc : 0.9958\n","Val_loss: 2.2077099871520978e-05, Val_Acc: 0.9720\n"]},{"output_type":"stream","name":"stderr","text":["100%|██████████| 119/119 [01:10<00:00,  1.70it/s]\n","100%|██████████| 8/8 [00:02<00:00,  3.79it/s]"]},{"output_type":"stream","name":"stdout","text":["Epoch [10/30], Loss: 1.5402874542505984e-06 , Acc : 0.9966\n","Val_loss: 2.1163484920220485e-05, Val_Acc: 0.9753\n"]},{"output_type":"stream","name":"stderr","text":["\n"]}]},{"cell_type":"code","source":["torch.save(paper_model.state_dict(), '/content/drive/MyDrive/DeepLearning_project/Pytorch_version_dfc/Aug_weight_0.9740.pth')"],"metadata":{"id":"o8fNDn2DlD9d"},"execution_count":null,"outputs":[]}]}